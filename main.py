#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
·ª®ng d·ª•ng Tr·∫Øc nghi·ªám v·ªõi CustomTkinter - Phi√™n b·∫£n c·∫£i ti·∫øn
File: main.py
"""
import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import pandas as pd
import random
import time
import os
import csv
from datetime import datetime, timedelta
from pathlib import Path
import threading
import glob

# C·∫•u h√¨nh CustomTkinter
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

import textwrap

def _wrap(self, s: str, width: int = 70) -> str:
    # T·ª± ch√®n \n ƒë·ªÉ CTkButton hi·ªÉn th·ªã xu·ªëng d√≤ng
    return textwrap.fill(str(s), width=width)

class SplashScreen:
    """M√†n h√¨nh kh·ªüi ƒë·ªông (d√πng chung root, kh√¥ng t·∫°o root m·ªõi)"""
    def __init__(self, root: ctk.CTk):
        self.root = root
        self.top = ctk.CTkToplevel(self.root)
        self.top.title("Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng")
        self.top.geometry("400x300")
        self.top.resizable(False, False)
        self.top.overrideredirect(True)

        # Center
        self.top.update_idletasks()
        x = (self.top.winfo_screenwidth() // 2) - 200
        y = (self.top.winfo_screenheight() // 2) - 150
        self.top.geometry(f"400x300+{x}+{y}")

        main_frame = ctk.CTkFrame(self.top, corner_radius=15)
        main_frame.pack(fill="both", expand=True, padx=2, pady=2)

        ctk.CTkLabel(
            main_frame, text="üéØ TR·∫ÆC NGHI·ªÜM QU√ÇN S·ª∞",
            font=ctk.CTkFont(size=24, weight="bold")
        ).pack(pady=(50, 20))

        ctk.CTkLabel(
            main_frame, text="Phi√™n b·∫£n 1.1 | Tr·∫ßn ƒê√¨nh Qu√¢n",
            font=ctk.CTkFont(size=12), text_color="gray"
        ).pack(pady=(0, 20))

        self.progress = ctk.CTkProgressBar(main_frame, width=300)
        self.progress.pack(pady=20)
        self.progress.set(0)

        self.status_label = ctk.CTkLabel(
            main_frame, text="ƒêang kh·ªüi ƒë·ªông...", font=ctk.CTkFont(size=14)
        )
        self.status_label.pack(pady=(10, 30))

    def set_progress(self, value: float, status: str = ""):
        self.progress.set(value)
        if status:
            self.status_label.configure(text=status)
        # Kh√¥ng c·∫ßn update() th·ªß c√¥ng; mainloop ƒëang ch·∫°y s·∫Ω render

    def close(self):
        self.top.destroy()

class QuizApplication:
    def __init__(self):
        # Ch·ªâ t·∫°o 1 root duy nh·∫•t
        self.root = ctk.CTk()
        self.root.title("·ª®ng d·ª•ng Tr·∫Øc nghi·ªám v1.1 | Tr·∫ßn ƒê√¨nh Qu√¢n")
        self.root.geometry("1400x800")
        self.root.withdraw()  # ·∫®n UI ch√≠nh ƒë·∫øn khi n·∫°p xong

        # C·∫•u h√¨nh
        self.config = {
            'exam_time_min': 30,
            'randomize_questions': True,
            'randomize_options': True,
            'theme': 'dark',
            'font_family': 'Inter'
        }

        # Load c·∫•u h√¨nh t·ª´ .env n·∫øu c√≥
        self.load_config()

        # D·ªØ li·ªáu
        self.questions = []
        self.current_mode = "practice"
        self.current_question_index = 0
        self.user_answers = {}
        self.question_feedback = {}
        self.exam_start_time = None
        self.exam_time_limit = None
        self.timer_running = False

        # Bi·∫øn giao di·ªán
        self.selected_answer = tk.StringVar()
        self.selected_option_index = -1
        self.option_buttons = []

    def _wrap(self, s: str, width: int = 70) -> str:
        """T·ª± ƒë·ªông xu·ªëng d√≤ng cho text trong n√∫t ƒë√°p √°n"""
        return textwrap.fill(str(s), width=width)

    def initialize_with_splash(self):
        """Kh·ªüi t·∫°o ·ª©ng d·ª•ng v·ªõi m√†n h√¨nh splash (ch·∫°y tr√™n main thread b·∫±ng after)"""
        splash = SplashScreen(self.root)

        def step1():
            splash.set_progress(0.2, "ƒêang t·∫£i c·∫•u h√¨nh...")
            self.root.after(400, step2)

        def step2():
            splash.set_progress(0.4, "ƒêang t√¨m file Excel...")
            excel_found = False
            try:
                excel_found = self.auto_load_excel()
            except Exception as e:
                print("L·ªói t·ª± ƒë·ªông t·∫£i Excel:", e)
            self._excel_found = excel_found
            self.root.after(400, step3)

        def step3():
            splash.set_progress(0.6, "ƒêang thi·∫øt l·∫≠p giao di·ªán...")
            self.setup_ui()  # Thi·∫øt l·∫≠p UI ch·ªâ tr√™n main thread
            self.root.after(400, step4)

        def step4():
            splash.set_progress(0.8, "ƒêang kh·ªüi t·∫°o d·ªØ li·ªáu...")
            if not getattr(self, "_excel_found", False):
                self.load_default_data()
            self.root.after(400, step5)

        def step5():
            splash.set_progress(1.0, "Ho√†n t·∫•t!")
            self.root.after(300, finish)

        def finish():
            splash.close()
            self.root.deiconify()  # Hi·ªÉn th·ªã c·ª≠a s·ªï ch√≠nh

        self.root.after(50, step1)

    # ================== CONFIG / DATA ==================
    def load_config(self):
        """Load c·∫•u h√¨nh t·ª´ file .env"""
        env_path = Path('.env')
        if env_path.exists():
            try:
                with open(env_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        if '=' in line and not line.strip().startswith('#'):
                            key, value = line.strip().split('=', 1)
                            if key == 'EXAM_TIME_MIN':
                                self.config['exam_time_min'] = int(value)
                            elif key in ['RANDOMIZE_QUESTIONS', 'RANDOMIZE_OPTIONS']:
                                self.config[key.lower()] = value.lower() == 'true'
                            elif key in ['THEME', 'FONT_FAMILY']:
                                self.config[key.lower()] = value
            except Exception as e:
                print(f"L·ªói ƒë·ªçc file .env: {e}")

    def auto_load_excel(self):
        """T·ª± ƒë·ªông t√¨m v√† t·∫£i file Excel trong th∆∞ m·ª•c hi·ªán t·∫°i"""
        try:
            excel_patterns = ['*.xlsx', '*.xls']
            excel_files = []
            for pattern in excel_patterns:
                excel_files.extend(glob.glob(pattern))
            if not excel_files:
                return False

            priority_keywords = ['cau_hoi', 'tracnghiem', 'quiz', 'question']
            prioritized_files, other_files = [], []
            for file in excel_files:
                if any(k in file.lower() for k in priority_keywords):
                    prioritized_files.append(file)
                else:
                    other_files.append(file)
            target_file = prioritized_files[0] if prioritized_files else other_files[0]
            return self.load_excel_data(target_file)
        except Exception as e:
            print(f"L·ªói t·ª± ƒë·ªông t·∫£i Excel: {e}")
            return False

    def load_excel_data(self, file_path):
        """T·∫£i d·ªØ li·ªáu t·ª´ file Excel"""
        try:
            df = pd.read_excel(file_path)

            required_columns = ['cau_hoi', 'tra_loi_a', 'tra_loi_b', 'tra_loi_c', 'dap_an_dung']
            missing_columns = [c for c in required_columns if c not in df.columns]
            if missing_columns:
                print(f"File Excel thi·∫øu c√°c c·ªôt: {', '.join(missing_columns)}")
                return False

            validation_errors = []
            for idx, row in df.iterrows():
                for col in required_columns:
                    if pd.isna(row[col]) or str(row[col]).strip() == '':
                        validation_errors.append(f"D√≤ng {idx+2}, c·ªôt '{col}': Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
                if row['dap_an_dung'] not in ['A', 'B', 'C', 'D']:
                    validation_errors.append(f"D√≤ng {idx+2}: ƒê√°p √°n ƒë√∫ng ph·∫£i l√† A, B, C, ho·∫∑c D")
            if validation_errors:
                print("Ph√°t hi·ªán l·ªói d·ªØ li·ªáu:", validation_errors[:5])
                return False

            self.questions = []
            for _, row in df.iterrows():
                question_data = {
                    'cau_hoi': str(row['cau_hoi']).strip(),
                    'tra_loi_a': str(row['tra_loi_a']).strip(),
                    'tra_loi_b': str(row['tra_loi_b']).strip(),
                    'tra_loi_c': str(row['tra_loi_c']).strip(),
                    'dap_an_dung': str(row['dap_an_dung']).strip(),
                    'giai_thich': str(row.get('giai_thich', '')).strip()
                }
                tra_loi_d = row.get('tra_loi_d', '')
                if pd.notna(tra_loi_d) and str(tra_loi_d).strip():
                    question_data['tra_loi_d'] = str(tra_loi_d).strip()
                else:
                    question_data['tra_loi_d'] = None
                self.questions.append(question_data)

            self.current_question_index = 0
            self.user_answers = {}
            self.question_feedback = {}

            print(f"ƒê√£ t·∫£i th√†nh c√¥ng {len(self.questions)} c√¢u h·ªèi t·ª´ {file_path}")
            return True
        except Exception as e:
            print(f"L·ªói ƒë·ªçc file Excel: {e}")
            return False

    def load_default_data(self):
        """T·∫£i d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ file Excel"""
        sample_data = [
            {
                'cau_hoi': 'Kh√¥ng t√¨m th·∫•y file Excel c√¢u h·ªèi. ƒê√¢y l√† c√¢u h·ªèi m·∫´u: Python ƒë∆∞·ª£c t·∫°o ra b·ªüi ai?',
                'tra_loi_a': 'Guido van Rossum',
                'tra_loi_b': 'Dennis Ritchie',
                'tra_loi_c': 'James Gosling',
                'tra_loi_d': 'Bjarne Stroustrup',
                'dap_an_dung': 'A',
                'giai_thich': 'Guido van Rossum l√† ng∆∞·ªùi t·∫°o ra Python v√†o nƒÉm 1991.'
            },
            {
                'cau_hoi': 'C√∫ ph√°p n√†o d√πng ƒë·ªÉ in ra m√†n h√¨nh trong Python?',
                'tra_loi_a': 'echo()',
                'tra_loi_b': 'print()',
                'tra_loi_c': 'printf()',
                'tra_loi_d': None,
                'dap_an_dung': 'B',
                'giai_thich': 'Trong Python, d√πng h√†m print().'
            }
        ]
        self.questions = sample_data
        self.update_question_display()
        self.update_status()
        if hasattr(self, 'file_info_label'):
            self.file_info_label.configure(text="üìÑ D·ªØ li·ªáu m·∫´u\n2 c√¢u h·ªèi", text_color="yellow")

    # ================== UI ==================
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_rowconfigure(0, weight=1)

        self.setup_sidebar()
        self.setup_main_content()
        self.setup_status_bar()

    def setup_sidebar(self):
        """Thi·∫øt l·∫≠p sidebar tr√°i"""
        self.sidebar = ctk.CTkFrame(self.root, width=300, corner_radius=0)
        self.sidebar.grid(row=0, column=0, rowspan=2, sticky="nsew")
        self.sidebar.grid_rowconfigure(10, weight=1)

        ctk.CTkLabel(
            self.sidebar, text="üéØ Tr·∫Øc Nghi·ªám Qu√¢n S·ª±", font=ctk.CTkFont(size=24, weight="bold")
        ).grid(row=0, column=0, padx=20, pady=(30, 20), sticky="ew")

        self.practice_btn = ctk.CTkButton(
            self.sidebar, text="üìö Luy·ªán t·∫≠p", font=ctk.CTkFont(size=18), height=50,
            command=lambda: self.switch_mode("practice")
        )
        self.practice_btn.grid(row=1, column=0, padx=20, pady=10, sticky="ew")

        self.exam_btn = ctk.CTkButton(
            self.sidebar, text="üìù Thi", font=ctk.CTkFont(size=18), height=50,
            command=lambda: self.switch_mode("exam")
        )
        self.exam_btn.grid(row=2, column=0, padx=20, pady=10, sticky="ew")

        load_btn = ctk.CTkButton(
            self.sidebar, text="üìÅ T·∫£i file Excel kh√°c", font=ctk.CTkFont(size=14), height=35,
            command=self.load_excel_file_manual
        )
        load_btn.grid(row=3, column=0, padx=20, pady=10, sticky="ew")

        ctk.CTkLabel(
            self.sidebar, text="‚öôÔ∏è C√†i ƒë·∫∑t", font=ctk.CTkFont(size=18, weight="bold")
        ).grid(row=4, column=0, padx=20, pady=(20, 10), sticky="w")

        self.random_questions_switch = ctk.CTkSwitch(
            self.sidebar, text="Ng·∫´u nhi√™n c√¢u h·ªèi", font=ctk.CTkFont(size=14)
        )
        self.random_questions_switch.grid(row=5, column=0, padx=20, pady=5, sticky="w")
        if self.config['randomize_questions']:
            self.random_questions_switch.select()

        self.random_options_switch = ctk.CTkSwitch(
            self.sidebar, text="Ng·∫´u nhi√™n ƒë√°p √°n (ƒêang ph√°t tri·ªÉn)", font=ctk.CTkFont(size=14)
        )
        self.random_options_switch.grid(row=6, column=0, padx=20, pady=5, sticky="w")
        if self.config['randomize_options']:
            self.random_options_switch.select()

        self.theme_switch = ctk.CTkSwitch(
            self.sidebar, text="Dark Mode", font=ctk.CTkFont(size=14),
            command=self.toggle_theme
        )
        self.theme_switch.grid(row=7, column=0, padx=20, pady=5, sticky="w")
        if self.config['theme'] == 'dark':
            self.theme_switch.select()

        self.file_info_label = ctk.CTkLabel(
            self.sidebar, text="ƒêang t·∫£i d·ªØ li·ªáu...", font=ctk.CTkFont(size=12), text_color="orange"
        )
        self.file_info_label.grid(row=11, column=0, padx=20, pady=20, sticky="ew")

    def setup_main_content(self):
        """Thi·∫øt l·∫≠p v√πng n·ªôi dung ch√≠nh"""
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        self.main_frame.grid_columnconfigure(0, weight=1)
        self.main_frame.grid_rowconfigure(1, weight=1)

        self.setup_navigation_header()
        self.setup_question_content()
        self.setup_control_footer()

    def setup_navigation_header(self):
        nav_frame = ctk.CTkFrame(self.main_frame)
        nav_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=20)
        nav_frame.grid_columnconfigure(1, weight=1)

        self.prev_btn = ctk.CTkButton(
            nav_frame, text="‚¨Ö C√¢u tr∆∞·ªõc", font=ctk.CTkFont(size=14), width=100,
            command=self.previous_question
        )
        self.prev_btn.grid(row=0, column=0, padx=10, pady=10)

        self.question_progress_label = ctk.CTkLabel(
            nav_frame, text="C√¢u 1/10", font=ctk.CTkFont(size=18, weight="bold")
        )
        self.question_progress_label.grid(row=0, column=1, pady=10)

        self.next_btn = ctk.CTkButton(
            nav_frame, text="C√¢u sau ‚û°", font=ctk.CTkFont(size=14), width=100,
            command=self.next_question
        )
        self.next_btn.grid(row=0, column=2, padx=10, pady=10)

    def setup_question_content(self):
        self.content_frame = ctk.CTkScrollableFrame(self.main_frame)
        self.content_frame.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        self.content_frame.grid_columnconfigure(0, weight=1)

        self.question_label = ctk.CTkLabel(
            self.content_frame, text="ƒêang t·∫£i c√¢u h·ªèi...", font=ctk.CTkFont(size=18, weight="bold"),
            wraplength=850, justify="left"
        )
        self.question_label.grid(row=0, column=0, sticky="ew", padx=20, pady=20)

        self.options_frame = ctk.CTkFrame(self.content_frame)
        self.options_frame.grid(row=1, column=0, sticky="ew", padx=20, pady=10)
        self.options_frame.grid_columnconfigure(0, weight=1)

        self.option_buttons = []
        for i in range(4):
            option_btn = ctk.CTkButton(
                self.options_frame,
                text=f"{chr(65+i)}. ƒê√°p √°n {chr(65+i)}",
                font=ctk.CTkFont(size=14),
                height=40,
                anchor="w",
                fg_color="gray25",
                hover_color="gray30",
                text_color="white",
                command=lambda idx=i: self.select_option(chr(65+idx))
            )
            option_btn.grid(row=i, column=0, sticky="ew", padx=30, pady=5)
            self.option_buttons.append(option_btn)

        self.feedback_frame = ctk.CTkFrame(self.content_frame)
        self.feedback_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=20)
        self.feedback_frame.grid_columnconfigure(0, weight=1)

        self.feedback_label = ctk.CTkLabel(
            self.feedback_frame, text="", font=ctk.CTkFont(size=16), wraplength=750
        )
        self.feedback_label.grid(row=0, column=0, padx=20, pady=15)

        self.explanation_label = ctk.CTkLabel(
            self.feedback_frame, text="", font=ctk.CTkFont(size=14),
            wraplength=750, text_color="gray"
        )
        self.explanation_label.grid(row=1, column=0, padx=20, pady=(0, 15))

        self.feedback_frame.grid_remove()

    def setup_control_footer(self):
        control_frame = ctk.CTkFrame(self.main_frame)
        control_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=20)
        control_frame.grid_columnconfigure(1, weight=1)

        self.check_btn = ctk.CTkButton(
            control_frame, text="‚úì Ki·ªÉm tra", font=ctk.CTkFont(size=16),
            height=40, command=self.check_answer
        )
        self.check_btn.grid(row=0, column=0, padx=10, pady=10)

        self.submit_btn = ctk.CTkButton(
            control_frame, text="üìã N·ªôp b√†i", font=ctk.CTkFont(size=16), height=40,
            fg_color="orange", hover_color="darkorange", command=self.submit_exam
        )
        self.submit_btn.grid(row=0, column=2, padx=10, pady=10)
        self.submit_btn.grid_remove()

    def setup_status_bar(self):
        status_frame = ctk.CTkFrame(self.root, height=50, corner_radius=0)
        status_frame.grid(row=1, column=0, columnspan=2, sticky="ew")
        status_frame.grid_columnconfigure(1, weight=1)

        self.mode_label = ctk.CTkLabel(
            status_frame, text="üìö Ch·∫ø ƒë·ªô: Luy·ªán t·∫≠p", font=ctk.CTkFont(size=14)
        )
        self.mode_label.grid(row=0, column=0, padx=20, pady=10)

        self.stats_label = ctk.CTkLabel(
            status_frame, text="C√¢u ƒë√£ tr·∫£ l·ªùi: 0/0", font=ctk.CTkFont(size=14)
        )
        self.stats_label.grid(row=0, column=1, pady=10)

        self.timer_label = ctk.CTkLabel(
            status_frame, text="", font=ctk.CTkFont(size=14, weight="bold"),
            text_color="orange"
        )
        self.timer_label.grid(row=0, column=2, padx=20, pady=10)

    # ================== LOGIC ==================
    def select_option(self, option_letter):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn ƒë√°p √°n"""
        self.selected_answer.set(option_letter)
        for i, btn in enumerate(self.option_buttons):
            if chr(65+i) == option_letter:
                btn.configure(fg_color="blue", hover_color="darkblue")
                self.selected_option_index = i
            else:
                btn.configure(fg_color="gray25", hover_color="gray30")

    def load_excel_file_manual(self):
        """T·∫£i file Excel th·ªß c√¥ng"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file Excel",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        if not file_path:
            return

        if self.load_excel_data(file_path):
            if self.random_questions_switch.get():
                random.shuffle(self.questions)
            self.update_question_display()
            self.update_status()

            file_name = os.path.basename(file_path)
            self.file_info_label.configure(
                text=f"üìÑ {file_name}\n{len(self.questions)} c√¢u h·ªèi",
                text_color="lightgreen"
            )
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫£i {len(self.questions)} c√¢u h·ªèi t·ª´ file Excel!")
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ ƒë·ªçc file Excel. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.")

    def update_question_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã c√¢u h·ªèi"""
        if not self.questions:
            self.question_label.configure(text="Kh√¥ng c√≥ c√¢u h·ªèi n√†o. Vui l√≤ng t·∫£i file Excel.")
            return

        if self.current_question_index >= len(self.questions):
            self.current_question_index = len(self.questions) - 1

        question = self.questions[self.current_question_index]
        self.question_progress_label.configure(
            text=f"C√¢u {self.current_question_index + 1}/{len(self.questions)}"
        )
        self.question_label.configure(text=question['cau_hoi'])

        options = [
            ('A', question['tra_loi_a']),
            ('B', question['tra_loi_b']),
            ('C', question['tra_loi_c'])
        ]
        if question.get('tra_loi_d'):
            options.append(('D', question['tra_loi_d']))

        if self.random_options_switch.get():
            random.shuffle(options)

        for i in range(4):
            if i < len(options):
                letter, text = options[i]
                self.option_buttons[i].configure(
                    text=f"{letter}. {textwrap.fill(str(text), 70)}",

                    state="normal"
                )
                self.option_buttons[i].grid()
            else:
                self.option_buttons[i].grid_remove()

        current_answer = self.user_answers.get(self.current_question_index, "")
        self.selected_answer.set(current_answer)

        for i, btn in enumerate(self.option_buttons):
            if i < len(options) and chr(65+i) == current_answer:
                btn.configure(fg_color="blue", hover_color="darkblue")
                self.selected_option_index = i
            else:
                btn.configure(fg_color="gray25", hover_color="gray30")

        self.prev_btn.configure(state="normal" if self.current_question_index > 0 else "disabled")
        self.next_btn.configure(state="normal" if self.current_question_index < len(self.questions) - 1 else "disabled")

        if self.current_mode == "practice":
            if self.current_question_index in self.question_feedback:
                fb = self.question_feedback[self.current_question_index]
                self.show_feedback(fb['correct'], fb['explanation'])
            else:
                self.hide_feedback()
        else:
            self.hide_feedback()

        if hasattr(self, 'file_info_label') and self.questions:
            if len(self.questions) > 2:
                self.file_info_label.configure(
                    text=f"üìÑ File ƒë√£ t·∫£i\n{len(self.questions)} c√¢u h·ªèi",
                    text_color="lightgreen"
                )

    def switch_mode(self, mode):
        """Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô luy·ªán t·∫≠p/thi"""
        if mode == self.current_mode:
            return

        self.current_mode = mode
        self.user_answers = {}
        self.question_feedback = {}
        self.current_question_index = 0

        if mode == "practice":
            self.mode_label.configure(text="üìö Ch·∫ø ƒë·ªô: Luy·ªán t·∫≠p")
            self.check_btn.grid()
            self.submit_btn.grid_remove()
            self.practice_btn.configure(fg_color=("gray75", "gray25"))
            self.exam_btn.configure(fg_color=("blue", "blue"))
            self.stop_timer()
        elif mode == "exam":
            self.mode_label.configure(text="üìù Ch·∫ø ƒë·ªô: Thi")
            self.check_btn.grid_remove()
            self.submit_btn.grid()
            self.exam_btn.configure(fg_color=("gray75", "gray25"))
            self.practice_btn.configure(fg_color=("blue", "blue"))
            self.start_exam_timer()

        self.update_question_display()
        self.update_status()

    def start_exam_timer(self):
        self.exam_start_time = datetime.now()
        self.exam_time_limit = self.exam_start_time + timedelta(minutes=self.config['exam_time_min'])
        self.timer_running = True
        self.update_timer()

    def update_timer(self):
        if not self.timer_running or self.current_mode != "exam":
            self.timer_label.configure(text="")
            return

        now = datetime.now()
        remaining = self.exam_time_limit - now
        if remaining.total_seconds() <= 0:
            self.timer_label.configure(text="‚è∞ H·∫øt gi·ªù!", text_color="red")
            self.timer_running = False
            messagebox.showwarning("H·∫øt gi·ªù", "Th·ªùi gian l√†m b√†i ƒë√£ h·∫øt! T·ª± ƒë·ªông n·ªôp b√†i.")
            self.submit_exam()
            return

        minutes = int(remaining.total_seconds() // 60)
        seconds = int(remaining.total_seconds() % 60)
        color = "red" if minutes < 5 else "orange"
        self.timer_label.configure(text=f"‚è∞ Th·ªùi gian: {minutes:02d}:{seconds:02d}", text_color=color)
        self.root.after(1000, self.update_timer)

    def stop_timer(self):
        self.timer_running = False
        self.timer_label.configure(text="")

    def previous_question(self):
        if self.current_question_index > 0:
            if self.selected_answer.get():
                self.user_answers[self.current_question_index] = self.selected_answer.get()
            self.current_question_index -= 1
            self.update_question_display()

    def next_question(self):
        if self.current_question_index < len(self.questions) - 1:
            if self.selected_answer.get():
                self.user_answers[self.current_question_index] = self.selected_answer.get()
            self.current_question_index += 1
            self.update_question_display()

    def check_answer(self):
        if not self.selected_answer.get():
            messagebox.showwarning("Ch∆∞a ch·ªçn ƒë√°p √°n", "Vui l√≤ng ch·ªçn m·ªôt ƒë√°p √°n tr∆∞·ªõc khi ki·ªÉm tra!")
            return

        self.user_answers[self.current_question_index] = self.selected_answer.get()
        question = self.questions[self.current_question_index]
        correct_answer = question['dap_an_dung']
        user_answer = self.selected_answer.get()
        is_correct = user_answer == correct_answer
        explanation = question.get('giai_thich', '')

        self.question_feedback[self.current_question_index] = {
            'correct': is_correct,
            'explanation': explanation
        }
        self.show_feedback(is_correct, explanation)
        self.update_status()

    def show_feedback(self, is_correct, explanation=""):
        self.feedback_frame.grid()

        question = self.questions[self.current_question_index]
        correct_answer = question['dap_an_dung']
        user_answer = self.selected_answer.get()

        for i, btn in enumerate(self.option_buttons):
            option_letter = chr(65+i)
            try:
                btn.winfo_viewable()
                if option_letter == correct_answer:
                    btn.configure(fg_color="green", hover_color="darkgreen")
                elif option_letter == user_answer and user_answer != correct_answer:
                    btn.configure(fg_color="red", hover_color="darkred")
                else:
                    btn.configure(fg_color="gray40", hover_color="gray45")
            except:
                continue

        if is_correct:
            self.feedback_label.configure(text="‚úÖ Ch√≠nh x√°c! B·∫°n ƒë√£ ch·ªçn ƒë√∫ng.", text_color="lightgreen")
        else:
            self.feedback_label.configure(text=f"‚ùå Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√†: {correct_answer}", text_color="lightcoral")

        if explanation:
            self.explanation_label.configure(text=f"üí° Gi·∫£i th√≠ch: {explanation}")
        else:
            self.explanation_label.configure(text="")

    def hide_feedback(self):
        self.feedback_frame.grid_remove()
        current_answer = self.selected_answer.get()
        for i, btn in enumerate(self.option_buttons):
            try:
                btn.winfo_viewable()
                if chr(65+i) == current_answer:
                    btn.configure(fg_color="blue", hover_color="darkblue")
                else:
                    btn.configure(fg_color="gray25", hover_color="gray30")
            except:
                continue

    def submit_exam(self):
        if self.selected_answer.get():
            self.user_answers[self.current_question_index] = self.selected_answer.get()

        unanswered = [i + 1 for i in range(len(self.questions)) if i not in self.user_answers or not self.user_answers[i]]
        if unanswered:
            unanswered_str = ", ".join(map(str, unanswered[:10]))
            if len(unanswered) > 10:
                unanswered_str += f" v√† {len(unanswered)-10} c√¢u kh√°c"
            result = messagebox.askyesno("X√°c nh·∫≠n n·ªôp b√†i", f"B·∫°n ch∆∞a tr·∫£ l·ªùi c√¢u: {unanswered_str}\n\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i kh√¥ng?")
            if not result:
                return
        else:
            result = messagebox.askyesno("X√°c nh·∫≠n n·ªôp b√†i", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i kh√¥ng?")
            if not result:
                return

        self.stop_timer()
        self.show_results()

    def show_results(self):
        correct_count = 0
        total_questions = len(self.questions)
        results_data = []

        for i, question in enumerate(self.questions):
            user_answer = self.user_answers.get(i, "")
            correct_answer = question['dap_an_dung']
            is_correct = user_answer == correct_answer
            if is_correct:
                correct_count += 1
            results_data.append({
                'stt': i + 1,
                'cau_hoi': question['cau_hoi'],
                'lua_chon': user_answer or "Kh√¥ng tr·∫£ l·ªùi",
                'dap_an_dung': correct_answer,
                'ket_qua': "ƒê√∫ng" if is_correct else "Sai",
                'giai_thich': question.get('giai_thich', '')
            })

        score_percentage = (correct_count / total_questions) * 100 if total_questions > 0 else 0
        exam_duration = ""
        if self.exam_start_time:
            duration = datetime.now() - self.exam_start_time
            minutes = int(duration.total_seconds() // 60)
            seconds = int(duration.total_seconds() % 60)
            exam_duration = f"{minutes} ph√∫t {seconds} gi√¢y"

        self.show_results_window(correct_count, total_questions, score_percentage, exam_duration, results_data)

    def show_results_window(self, correct_count, total_questions, score_percentage, exam_duration, results_data):
        results_window = ctk.CTkToplevel(self.root)
        results_window.title("K·∫øt qu·∫£ b√†i thi")
        results_window.geometry("1000x700")
        results_window.transient(self.root)
        results_window.grab_set()

        header_frame = ctk.CTkFrame(results_window)
        header_frame.pack(fill="x", padx=20, pady=20)

        ctk.CTkLabel(header_frame, text="üèÜ K·∫æT QU·∫¢ B√ÄI THI", font=ctk.CTkFont(size=24, weight="bold")).pack(pady=10)

        stats_frame = ctk.CTkFrame(header_frame)
        stats_frame.pack(fill="x", padx=20, pady=10)
        stats_frame.grid_columnconfigure((0, 1, 2), weight=1)

        ctk.CTkLabel(
            stats_frame, text=f"üìä ƒêi·ªÉm s·ªë\n{score_percentage:.1f}%",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="lightgreen" if score_percentage >= 80 else "orange" if score_percentage >= 60 else "lightcoral"
        ).grid(row=0, column=0, padx=20, pady=15)

        ctk.CTkLabel(
            stats_frame, text=f"‚úÖ K·∫øt qu·∫£\n{correct_count}/{total_questions} c√¢u ƒë√∫ng",
            font=ctk.CTkFont(size=16, weight="bold")
        ).grid(row=0, column=1, padx=20, pady=15)

        if exam_duration:
            ctk.CTkLabel(
                stats_frame, text=f"‚è∞ Th·ªùi gian\n{exam_duration}", font=ctk.CTkFont(size=16, weight="bold")
            ).grid(row=0, column=2, padx=20, pady=15)

        list_frame = ctk.CTkFrame(results_window)
        list_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))

        ctk.CTkLabel(
            list_frame, text="üìã Chi ti·∫øt t·ª´ng c√¢u h·ªèi:", font=ctk.CTkFont(size=18, weight="bold")
        ).pack(anchor="w", padx=20, pady=(20, 10))

        scrollable_frame = ctk.CTkScrollableFrame(list_frame, height=300)
        scrollable_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))

        for result in results_data:
            result_item = ctk.CTkFrame(scrollable_frame)
            result_item.pack(fill="x", pady=5)

            status_color = "lightgreen" if result['ket_qua'] == "ƒê√∫ng" else "lightcoral"
            status_icon = "‚úÖ" if result['ket_qua'] == "ƒê√∫ng" else "‚ùå"

            ctk.CTkLabel(
                result_item, text=f"{status_icon} C√¢u {result['stt']}",
                font=ctk.CTkFont(size=14, weight="bold"), text_color=status_color
            ).pack(anchor="w", padx=15, pady=(10, 5))

            question_text = result['cau_hoi']
            if len(question_text) > 100:
                question_text = question_text[:100] + "..."
            ctk.CTkLabel(
                result_item, text=f"‚ùì {question_text}", font=ctk.CTkFont(size=12),
                anchor="w", wraplength=900
            ).pack(fill="x", padx=15, pady=2)

            ctk.CTkLabel(
                result_item, text=f"üë§ B·∫°n ch·ªçn: {result['lua_chon']} | ‚úì ƒê√°p √°n ƒë√∫ng: {result['dap_an_dung']}",
                font=ctk.CTkFont(size=12), text_color="gray"
            ).pack(anchor="w", padx=15, pady=(2, 10))

        footer_frame = ctk.CTkFrame(results_window)
        footer_frame.pack(fill="x", padx=20, pady=(0, 20))
        button_frame = ctk.CTkFrame(footer_frame)
        button_frame.pack(pady=15)

        ctk.CTkButton(
            button_frame, text="üìÑ Xu·∫•t k·∫øt qu·∫£ (CSV)", font=ctk.CTkFont(size=14),
            command=lambda: self.export_results(results_data, correct_count, total_questions, score_percentage, exam_duration)
        ).pack(side="left", padx=10)

        wrong_questions = [r for r in results_data if r['ket_qua'] == "Sai"]
        if wrong_questions:
            ctk.CTkButton(
                button_frame, text=f"üîç Xem {len(wrong_questions)} c√¢u sai",
                font=ctk.CTkFont(size=14), fg_color="orange", hover_color="darkorange",
                command=lambda: self.show_wrong_answers(wrong_questions)
            ).pack(side="left", padx=10)

        ctk.CTkButton(button_frame, text="‚ùå ƒê√≥ng", font=ctk.CTkFont(size=14), command=results_window.destroy)\
            .pack(side="left", padx=10)

    def export_results(self, results_data, correct_count, total_questions, score_percentage, exam_duration):
        try:
            file_path = filedialog.asksaveasfilename(
                title="L∆∞u k·∫øt qu·∫£",
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                initialname=f"ket_qua_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            )
            if not file_path:
                return

            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                csvfile.write(f"# K·∫æT QU·∫¢ B√ÄI THI\n")
                csvfile.write(f"# Ng√†y thi: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                csvfile.write(f"# ƒêi·ªÉm s·ªë: {score_percentage:.1f}%\n")
                csvfile.write(f"# S·ªë c√¢u ƒë√∫ng: {correct_count}/{total_questions}\n")
                if exam_duration:
                    csvfile.write(f"# Th·ªùi gian l√†m b√†i: {exam_duration}\n")
                csvfile.write(f"#\n")

                writer = csv.writer(csvfile)
                writer.writerow(['STT', 'C√¢u h·ªèi', 'L·ª±a ch·ªçn', 'ƒê√°p √°n ƒë√∫ng', 'K·∫øt qu·∫£', 'Gi·∫£i th√≠ch'])
                for r in results_data:
                    writer.writerow([r['stt'], r['cau_hoi'], r['lua_chon'], r['dap_an_dung'], r['ket_qua'], r['giai_thich']])

            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file:\n{file_path}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file:\n{str(e)}")

    def show_wrong_answers(self, wrong_questions):
        wrong_window = ctk.CTkToplevel(self.root)
        wrong_window.title("C√¢u tr·∫£ l·ªùi sai")
        wrong_window.geometry("900x600")
        wrong_window.transient(self.root)

        ctk.CTkLabel(
            wrong_window, text=f"üîç XEM L·∫†I {len(wrong_questions)} C√ÇU TR·∫¢ L·ªúI SAI",
            font=ctk.CTkFont(size=20, weight="bold")
        ).pack(pady=20)

        scrollable_frame = ctk.CTkScrollableFrame(wrong_window)
        scrollable_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))

        for wrong in wrong_questions:
            wrong_frame = ctk.CTkFrame(scrollable_frame)
            wrong_frame.pack(fill="x", pady=10)
            wrong_frame.grid_columnconfigure(0, weight=1)

            ctk.CTkLabel(
                wrong_frame, text=f"‚ùå C√¢u {wrong['stt']}",
                font=ctk.CTkFont(size=16, weight="bold"), text_color="lightcoral"
            ).grid(row=0, column=0, sticky="w", padx=20, pady=(15, 5))

            ctk.CTkLabel(
                wrong_frame, text=f"‚ùì {wrong['cau_hoi']}",
                font=ctk.CTkFont(size=14), wraplength=800, justify="left"
            ).grid(row=1, column=0, sticky="ew", padx=20, pady=5)

            ctk.CTkLabel(
                wrong_frame, text=f"üë§ B·∫°n ƒë√£ ch·ªçn: {wrong['lua_chon']}",
                font=ctk.CTkFont(size=13), text_color="lightcoral"
            ).grid(row=2, column=0, sticky="w", padx=20, pady=2)

            ctk.CTkLabel(
                wrong_frame, text=f"‚úÖ ƒê√°p √°n ƒë√∫ng: {wrong['dap_an_dung']}",
                font=ctk.CTkFont(size=13), text_color="lightgreen"
            ).grid(row=3, column=0, sticky="w", padx=20, pady=2)

            if wrong['giai_thich']:
                ctk.CTkLabel(
                    wrong_frame, text=f"üí° Gi·∫£i th√≠ch: {wrong['giai_thich']}",
                    font=ctk.CTkFont(size=12), text_color="gray",
                    wraplength=800, justify="left"
                ).grid(row=4, column=0, sticky="ew", padx=20, pady=(5, 15))

        ctk.CTkButton(wrong_window, text="ƒê√≥ng", command=wrong_window.destroy).pack(pady=20)

    def update_status(self):
        if not self.questions:
            self.stats_label.configure(text="Ch∆∞a c√≥ d·ªØ li·ªáu")
            return

        answered_count = len([ans for ans in self.user_answers.values() if ans])
        total_count = len(self.questions)

        if self.current_mode == "practice":
            checked_count = len(self.question_feedback)
            self.stats_label.configure(
                text=f"ƒê√£ ki·ªÉm tra: {checked_count}/{total_count} | Tr·∫£ l·ªùi: {answered_count}/{total_count}"
            )
        else:
            self.stats_label.configure(text=f"ƒê√£ tr·∫£ l·ªùi: {answered_count}/{total_count}")

    def toggle_theme(self):
        if self.theme_switch.get():
            ctk.set_appearance_mode("dark")
            self.config['theme'] = 'dark'
        else:
            ctk.set_appearance_mode("light")
            self.config['theme'] = 'light'

    def run(self):
        self.root.mainloop()


def main():
    """H√†m main"""
    app = QuizApplication()
    app.initialize_with_splash()
    app.run()


if __name__ == "__main__":
    main()
